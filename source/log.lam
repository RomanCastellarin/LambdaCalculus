def one = suc zero
def two = suc one

-- not b = if b then false else true
def not = \b. b false true

-- resta x y = foldn y pred x
def resta = \x y. y pred x

-- menor x y = not (is0 (resta y x))
def menor = \x y. not (is0 (resta y x))

-- div x y = if (menor x y) then 0 else (div (resta x y) y) + 1
def div = Y (\f x y. (menor x y) zero (suc (f (resta x y) y)))

-- log2 n = if (is0 (n-1)) then 0 else (log2 (div n 2)) + 1
def log2 = Y (\f n. (is0 (pred n)) zero (suc (f (div n two))))
